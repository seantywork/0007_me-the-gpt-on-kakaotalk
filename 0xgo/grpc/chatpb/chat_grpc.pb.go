// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chatpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatterClient is the client API for Chatter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatterClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	TalkToMe(ctx context.Context, in *TalkRequest, opts ...grpc.CallOption) (Chatter_TalkToMeClient, error)
	WhatDidYouSay(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
}

type chatterClient struct {
	cc grpc.ClientConnInterface
}

func NewChatterClient(cc grpc.ClientConnInterface) ChatterClient {
	return &chatterClient{cc}
}

func (c *chatterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/chatpb.Chatter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatterClient) TalkToMe(ctx context.Context, in *TalkRequest, opts ...grpc.CallOption) (Chatter_TalkToMeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chatter_ServiceDesc.Streams[0], "/chatpb.Chatter/TalkToMe", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatterTalkToMeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chatter_TalkToMeClient interface {
	Recv() (*TalkResponse, error)
	grpc.ClientStream
}

type chatterTalkToMeClient struct {
	grpc.ClientStream
}

func (x *chatterTalkToMeClient) Recv() (*TalkResponse, error) {
	m := new(TalkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatterClient) WhatDidYouSay(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, "/chatpb.Chatter/WhatDidYouSay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatterServer is the server API for Chatter service.
// All implementations must embed UnimplementedChatterServer
// for forward compatibility
type ChatterServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	TalkToMe(*TalkRequest, Chatter_TalkToMeServer) error
	WhatDidYouSay(context.Context, *HistoryRequest) (*HistoryResponse, error)
	mustEmbedUnimplementedChatterServer()
}

// UnimplementedChatterServer must be embedded to have forward compatible implementations.
type UnimplementedChatterServer struct {
}

func (UnimplementedChatterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedChatterServer) TalkToMe(*TalkRequest, Chatter_TalkToMeServer) error {
	return status.Errorf(codes.Unimplemented, "method TalkToMe not implemented")
}
func (UnimplementedChatterServer) WhatDidYouSay(context.Context, *HistoryRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhatDidYouSay not implemented")
}
func (UnimplementedChatterServer) mustEmbedUnimplementedChatterServer() {}

// UnsafeChatterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatterServer will
// result in compilation errors.
type UnsafeChatterServer interface {
	mustEmbedUnimplementedChatterServer()
}

func RegisterChatterServer(s grpc.ServiceRegistrar, srv ChatterServer) {
	s.RegisterService(&Chatter_ServiceDesc, srv)
}

func _Chatter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatpb.Chatter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatter_TalkToMe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TalkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatterServer).TalkToMe(m, &chatterTalkToMeServer{stream})
}

type Chatter_TalkToMeServer interface {
	Send(*TalkResponse) error
	grpc.ServerStream
}

type chatterTalkToMeServer struct {
	grpc.ServerStream
}

func (x *chatterTalkToMeServer) Send(m *TalkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Chatter_WhatDidYouSay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatterServer).WhatDidYouSay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatpb.Chatter/WhatDidYouSay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatterServer).WhatDidYouSay(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chatter_ServiceDesc is the grpc.ServiceDesc for Chatter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chatter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatpb.Chatter",
	HandlerType: (*ChatterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Chatter_SayHello_Handler,
		},
		{
			MethodName: "WhatDidYouSay",
			Handler:    _Chatter_WhatDidYouSay_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TalkToMe",
			Handler:       _Chatter_TalkToMe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat.proto",
}
